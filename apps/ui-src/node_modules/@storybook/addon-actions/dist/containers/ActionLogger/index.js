"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.date.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.object.create");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.array.find");

require("core-js/modules/es6.array.map");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _lib = require("../../lib");

var _util = require("../../lib/util");

var _ActionLogger = _interopRequireDefault(require("../../components/ActionLogger"));

var _ = require("../..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ActionLogger =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ActionLogger, _React$Component);

  function ActionLogger(props) {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ActionLogger);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ActionLogger)).call.apply(_getPrototypeOf2, [this, props].concat(args)));
    _this.state = {
      actions: []
    };

    _this._actionListener = function (action) {
      return _this.addAction(action);
    };

    _this._storyChangeListener = function () {
      return _this.handleStoryChange();
    };

    return _this;
  }

  _createClass(ActionLogger, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          channel = _this$props.channel,
          api = _this$props.api;
      channel.on(_.EVENT_ID, this._actionListener);
      this.stopListeningOnStory = api.onStory(this._storyChangeListener);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var channel = this.props.channel;
      channel.removeListener(_.EVENT_ID, this._actionListener);

      if (this.stopListeningOnStory) {
        this.stopListeningOnStory();
      }
    }
  }, {
    key: "handleStoryChange",
    value: function handleStoryChange() {
      var actions = this.state.actions;

      if (actions.length > 0 && actions[0].options.clearOnStoryChange) {
        this.clearActions();
      }
    }
  }, {
    key: "addAction",
    value: function addAction(action) {
      var _this$state$actions = this.state.actions,
          actions = _this$state$actions === void 0 ? [] : _this$state$actions;
      actions = _toConsumableArray(actions);
      action.data.args = action.data.args.map(function (arg) {
        return (0, _lib.retrocycle)(arg);
      }); // eslint-disable-line

      var isCyclic = !!action.data.args.find(function (arg) {
        return (0, _util.isObject)(arg) && arg[_lib.CYCLIC_KEY];
      });
      var previous = actions.length && actions[0];

      if (previous && !isCyclic && (0, _deepEqual.default)(previous.data, action.data, {
        strict: true
      })) {
        previous.count++; // eslint-disable-line
      } else {
        action.count = 1; // eslint-disable-line

        actions.unshift(action);
      }

      this.setState({
        actions: actions.slice(0, action.options.limit)
      });
    }
  }, {
    key: "clearActions",
    value: function clearActions() {
      this.setState({
        actions: []
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state$actions2 = this.state.actions,
          actions = _this$state$actions2 === void 0 ? [] : _this$state$actions2;
      var active = this.props.active;
      var props = {
        actions: actions,
        onClear: function onClear() {
          return _this2.clearActions();
        }
      };
      return active ? _react.default.createElement(_ActionLogger.default, props) : null;
    }
  }]);

  return ActionLogger;
}(_react.default.Component);

exports.default = ActionLogger;
ActionLogger.propTypes = {
  active: _propTypes.default.bool.isRequired,
  channel: _propTypes.default.shape({
    emit: _propTypes.default.func,
    on: _propTypes.default.func,
    removeListener: _propTypes.default.func
  }).isRequired,
  api: _propTypes.default.shape({
    onStory: _propTypes.default.func,
    getQueryParam: _propTypes.default.func,
    setQueryParams: _propTypes.default.func
  }).isRequired
};