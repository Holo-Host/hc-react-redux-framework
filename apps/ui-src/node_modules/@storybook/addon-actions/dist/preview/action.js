"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = action;

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.array.map");

var _v = _interopRequireDefault(require("uuid/v1"));

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _constants = require("../constants");

var _util = require("../lib/util");

var _configureActions = require("./configureActions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function action(name) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var actionOptions = _objectSpread({}, _configureActions.config, options); // eslint-disable-next-line no-shadow


  var handler = function action() {
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    var args = _args.map(function (arg) {
      return (0, _util.prepareArguments)(arg, actionOptions.depth);
    });

    var channel = _addons.default.getChannel();

    var id = (0, _v.default)();
    channel.emit(_constants.EVENT_ID, {
      id: id,
      data: {
        name: name,
        args: args
      },
      options: actionOptions
    });
  };

  if (_util.canConfigureName && name && typeof name === 'string') {
    Object.defineProperty(handler, 'name', {
      value: name
    });
  }

  return handler;
}