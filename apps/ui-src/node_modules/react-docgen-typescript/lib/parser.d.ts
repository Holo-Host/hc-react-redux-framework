import * as ts from 'typescript';
export interface StringIndexedObject<T> {
    [key: string]: T;
}
export interface ComponentDoc {
    displayName: string;
    description: string;
    props: Props;
    methods: Method[];
}
export interface Props extends StringIndexedObject<PropItem> {
}
export interface PropItem {
    name: string;
    required: boolean;
    type: PropItemType;
    description: string;
    defaultValue: any;
    parent?: ParentType;
}
export interface Method {
    name: string;
    docblock: string;
    modifiers: string[];
    params: Array<{
        name: string;
        description?: string | null;
    }>;
    returns?: {
        description?: string | null;
        type?: string;
    } | null;
    description: string;
}
export interface Component {
    name: string;
}
export interface PropItemType {
    name: string;
    value?: any;
}
export interface ParentType {
    name: string;
    fileName: string;
}
export declare type PropFilter = (props: PropItem, component: Component) => boolean;
export declare type ComponentNameResolver = (exp: ts.Symbol, source: ts.SourceFile) => string | undefined | null | false;
export interface ParserOptions {
    propFilter?: StaticPropFilter | PropFilter;
    componentNameResolver?: ComponentNameResolver;
}
export interface StaticPropFilter {
    skipPropsWithName?: string[] | string;
    skipPropsWithoutDoc?: boolean;
}
export declare const defaultParserOpts: ParserOptions;
export interface FileParser {
    parse(filePathOrPaths: string | string[]): ComponentDoc[];
    parseWithProgramProvider(filePathOrPaths: string | string[], programProvider?: () => ts.Program): ComponentDoc[];
}
/**
 * Parses a file with default TS options
 * @param filePath component file that should be parsed
 */
export declare function parse(filePathOrPaths: string | string[], parserOpts?: ParserOptions): ComponentDoc[];
/**
 * Constructs a parser for a default configuration.
 */
export declare function withDefaultConfig(parserOpts?: ParserOptions): FileParser;
/**
 * Constructs a parser for a specified tsconfig file.
 */
export declare function withCustomConfig(tsconfigPath: string, parserOpts: ParserOptions): FileParser;
/**
 * Constructs a parser for a specified set of TS compiler options.
 */
export declare function withCompilerOptions(compilerOptions: ts.CompilerOptions, parserOpts?: ParserOptions): FileParser;
interface JSDoc {
    description: string;
    fullComment: string;
    tags: StringIndexedObject<string>;
}
export declare class Parser {
    private checker;
    private propFilter;
    constructor(program: ts.Program, opts: ParserOptions);
    getComponentInfo(exp: ts.Symbol, source: ts.SourceFile, componentNameResolver?: ComponentNameResolver): ComponentDoc | null;
    extractPropsFromTypeIfStatelessComponent(type: ts.Type): ts.Symbol | null;
    extractPropsFromTypeIfStatefulComponent(type: ts.Type): ts.Symbol | null;
    extractMembersFromType(type: ts.Type): ts.Symbol[];
    getMethodsInfo(type: ts.Type): Method[];
    getModifiers(member: ts.Symbol): string[];
    getParameterInfo(callSignature: ts.Signature): {
        description: string | null;
        name: string;
    }[];
    getCallSignature(symbol: ts.Symbol): ts.Signature;
    isTaggedPublic(symbol: ts.Symbol): boolean;
    getReturnDescription(symbol: ts.Symbol): string | null;
    getPropsInfo(propsObj: ts.Symbol, defaultProps?: StringIndexedObject<string>): Props;
    findDocComment(symbol: ts.Symbol): JSDoc;
    /**
     * Extracts a full JsDoc comment from a symbol, even
     * though TypeScript has broken down the JsDoc comment into plain
     * text and JsDoc tags.
     */
    getFullJsDocComment(symbol: ts.Symbol): JSDoc;
    extractDefaultPropsFromComponent(symbol: ts.Symbol, source: ts.SourceFile): {};
    getLiteralValueFromPropertyAssignment(property: ts.PropertyAssignment): string | null;
    getPropMap(properties: ts.NodeArray<ts.PropertyAssignment>): StringIndexedObject<string>;
}
export declare function getDefaultExportForFile(source: ts.SourceFile): string;
export {};
