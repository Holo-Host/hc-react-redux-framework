import { StringType, B, MapBuilder, FsaBuilder } from './types';
export interface CreateAsyncAction<T1 extends StringType, T2 extends StringType, T3 extends StringType> {
    <P1, P2, P3>(): AsyncActionBuilder<T1, T2, T3, P1, P2, P3>;
}
export declare type AsyncActionBuilder<T1 extends StringType, T2 extends StringType, T3 extends StringType, P1, P2, P3> = {
    request: FsaBuilder<T1, B<P1>>;
    success: FsaBuilder<T2, B<P2>>;
    failure: FsaBuilder<T3, B<P3>>;
};
export declare type AsyncActionWithMappers<T1 extends StringType, T2 extends StringType, T3 extends StringType, A1 = void, P1 = void, A2 = void, P2 = void, A3 = void, P3 = void> = {
    request: MapBuilder<T1, B<A1>, B<P1>>;
    success: MapBuilder<T2, B<A2>, B<P2>>;
    failure: MapBuilder<T3, B<A3>, B<P3>>;
};
export declare function createAsyncAction<T1 extends StringType, T2 extends StringType, T3 extends StringType>(requestType: T1, successType: T2, failureType: T3): CreateAsyncAction<T1, T2, T3>;
