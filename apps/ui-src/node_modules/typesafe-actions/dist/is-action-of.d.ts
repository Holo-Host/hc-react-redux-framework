import { TypeMeta } from './types';
export declare type AC<T extends {
    type: string;
}> = ((...args: any[]) => T) & TypeMeta<T['type']>;
export declare type ACs<T1 extends {
    type: string;
}, T2 extends {
    type: string;
} = any, T3 extends {
    type: string;
} = any, T4 extends {
    type: string;
} = any, T5 extends {
    type: string;
} = any> = [AC<T1>] | [AC<T1>, AC<T2>] | [AC<T1>, AC<T2>, AC<T3>] | [AC<T1>, AC<T2>, AC<T3>, AC<T4>] | [AC<T1>, AC<T2>, AC<T3>, AC<T4>, AC<T5>];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A, T4 extends A, T5 extends A>(actionCreators: ACs<T1> | ACs<T1, T2> | ACs<T1, T2, T3> | ACs<T1, T2, T3, T4> | ACs<T1, T2, T3, T4, T5>, action: {
    type: string;
}): action is [T1, T2, T3, T4, T5][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A>(actionCreator: AC<T1>, action: {
    type: string;
}): action is T1;
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A, T4 extends A, T5 extends A>(actionCreators: ACs<T1> | ACs<T1, T2> | ACs<T1, T2, T3> | ACs<T1, T2, T3, T4> | ACs<T1, T2, T3, T4, T5>): (action: A) => action is [T1, T2, T3, T4, T5][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A>(actionCreator: AC<T1>): (action: A) => action is T1;
