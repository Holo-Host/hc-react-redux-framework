import { TypeMeta } from './types';
export declare type AC<T extends {
    type: string;
}> = ((...args: any[]) => T) & TypeMeta<T['type']>;
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A>(actionCreators: [AC<T1>], action: {
    type: string;
}): action is [T1][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A>(actionCreators: [AC<T1>, AC<T2>], action: {
    type: string;
}): action is [T1, T2][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A>(actionCreators: [AC<T1>, AC<T2>, AC<T3>], action: {
    type: string;
}): action is [T1, T2, T3][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A, T4 extends A>(actionCreators: [AC<T1>, AC<T2>, AC<T3>, AC<T4>], action: {
    type: string;
}): action is [T1, T2, T3, T4][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A, T4 extends A, T5 extends A>(actionCreators: [AC<T1>, AC<T2>, AC<T3>, AC<T4>, AC<T5>], action: {
    type: string;
}): action is [T1, T2, T3, T4, T5][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A>(actionCreator: AC<T1>, action: {
    type: string;
}): action is T1;
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A>(actionCreators: [AC<T1>]): (action: A) => action is [T1][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A>(actionCreators: [AC<T1>, AC<T2>]): (action: A) => action is [T1, T2][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A>(actionCreators: [AC<T1>, AC<T2>, AC<T3>]): (action: A) => action is [T1, T2, T3][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A, T4 extends A>(actionCreators: [AC<T1>, AC<T2>, AC<T3>, AC<T4>]): (action: A) => action is [T1, T2, T3, T4][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A, T2 extends A, T3 extends A, T4 extends A, T5 extends A>(actionCreators: [AC<T1>, AC<T2>, AC<T3>, AC<T4>, AC<T5>]): (action: A) => action is [T1, T2, T3, T4, T5][number];
export declare function isActionOf<A extends {
    type: string;
}, T1 extends A>(actionCreator: AC<T1>): (action: A) => action is T1;
